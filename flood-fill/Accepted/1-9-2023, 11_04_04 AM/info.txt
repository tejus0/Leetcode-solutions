{"id":874518771,"lang":"cpp","lang_name":"C++","time":"2 weeks, 2 days","timestamp":1673242444,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/874518771/","is_pending":"Not Pending","title":"Flood Fill","memory":"13.8 MB","code":"class Solution {\nprivate:\n \n    void dfs(int row,int col,vector<vector<int>>& ans,vector<vector<int>>& image,int newcolor, int delRow[],int delCol[],int inicolor){\n\t\n\t\n\t//what to pass \n\t//1.orig image \n\t//2.copied image\n\t//3.newcolor &&initialcolor\n\t//4.delrow delcol for 4 directions \n\t//5.sr and sc \n     ans[row][col]=newcolor;//first make the sr and sc only with newcolor \n     int n=image.size();\n     int m=image[0].size();\n     for(int i=0;i<4;i++)//go inoto 4 directions \n     {\n         int nrow= row+delRow[i]; //get to that newrownewcol \n         int ncol= col+delCol[i];\n         if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && image[nrow][ncol]==inicolor &&\n           ans[nrow][ncol]!=newcolor)\n\t\t   //check if it is within boundary and initial grid color and current grid coor is same and in copied matricx that //grid is not filled with newcolor \n     //call dfs         \n     dfs(nrow,ncol,ans,image,newcolor,delRow,delCol,inicolor);\n     }\n    }\npublic:\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newcolor) {\n        int inicolor= image[sr][sc];\n        vector<vector<int>>& ans=image;\n        int delRow[]={-1,0,1,0};\n        int delCol[]={0,1,0,-1};\n        dfs(sr,sc,ans,image,newcolor,delRow,delCol,inicolor);\n        return ans;\n    }\n}; \n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill","has_notes":false}