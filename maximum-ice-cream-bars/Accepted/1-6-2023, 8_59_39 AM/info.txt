{"id":872353416,"lang":"cpp","lang_name":"C++","time":"2 weeks, 5 days","timestamp":1672975779,"status":10,"status_display":"Accepted","runtime":"169 ms","url":"/submissions/detail/872353416/","is_pending":"Not Pending","title":"Maximum Ice Cream Bars","memory":"80.6 MB","code":"class Solution {\npublic:\n    int maxIceCream(vector<int>& costs, int coins) {\n        int n = costs.size();\n        int m = *max_element(costs.begin(), costs.end());\n        int icecreams = 0;\n\n        vector<int> costsFrequency(m + 1);\n        for (auto& cost : costs) {\n            costsFrequency[cost]++;\n        }\n\n        for (int cost = 1; cost <= m; ++cost) {\n            // No ice cream is present costing 'cost'.\n            if (costsFrequency[cost] == 0) {\n                continue;\n            }\n            // We don't have enough 'coins' to even pick one ice cream.\n            if (coins < cost) {\n                break;\n            }\n            \n            // Count how many icecreams of 'cost' we can pick with our 'coins'.\n            // Either we can pick all ice creams of 'cost' or we will be limited by remaining 'coins'.\n            int count = min(costsFrequency[cost], coins / cost);\n            // We reduce price of picked ice creams from our coins.\n            coins -= cost * count;\n            icecreams += count;\n        }\n\n        return icecreams;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-ice-cream-bars","has_notes":false}