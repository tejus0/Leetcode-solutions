{"id":863170615,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1671618345,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/863170615/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"6.3 MB","code":"class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        if (!digits.size()) {\n            return {};\n        }\n\n        vector<string> combs;\n        const vector<string> chars = { \"0\", \"1\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\" };\n        string builder;\n        build(builder, 0, digits, chars, combs);\n        return combs;\n    }\n\n    /**\n     * start with an empty builder, for every digit, use all chars it represents to attach to the builder, when i reaches the end of digits, push builder to result;\n     */\n    void build(string builder, int i, const string& digits, const vector<string>& chars, vector<string>& combs) {\n        if (i == digits.size()) {\n            combs.push_back(builder);\n            return;\n        }\n\n        int d = digits[i] - '0';\n        for (char ch : chars[d]) {\n            builder=builder + ch;\n            build(builder, i + 1, digits, chars, combs);\n            builder.pop_back();\n        }\n    }\n};","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false}