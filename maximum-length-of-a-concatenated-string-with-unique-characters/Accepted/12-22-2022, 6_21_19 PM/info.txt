{"id":863741098,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1671713479,"status":10,"status_display":"Accepted","runtime":"61 ms","url":"/submissions/detail/863741098/","is_pending":"Not Pending","title":"Maximum Length of a Concatenated String with Unique Characters","memory":"61.2 MB","code":"class Solution {\npublic:\n    \n    int maxi = 0;\n    \n    // function for checking uniqueness of the string\n    \n    bool is_unique(string& str, vector<int>& prev)\n    {\n        int n = str.size();\n        \n        // mp will store the count of all the characters in string\n        \n        vector<int> mp(26, 0);\n        for(int i = 0; i < n; i++)\n        {\n            // if we found duplicates return false\n            if(mp[str[i] - 'a'] > 0)\n                return false;\n            mp[str[i] - 'a']++;\n        }\n        for(int i=0;i<n;i++){\n            if(prev[str[i]-'a']) return false;\n        }\n        return true;\n    }\n    \n    int helper(vector<string>& arr, vector<int>& prev, int i, int n)\n    {\n        if(arr.size()==i){\n            return n;\n        }\n        // if we have got duplicate int our result then simply return\n        string current=arr[i];\n        if(is_unique(current,prev) == false)\n            return helper(arr,prev,i+1,n);\n        \n        \n        // we have two options either include the curr string or exclude\n        \n        // include the curr string\n        else{\n            for(int i=0;i<current.size();i++){\n                prev[current[i]-'a']++;\n            }\n        n += current.size();\n        int acc=helper(arr,prev, i + 1, n);\n        \n        // exclude the curr string\n        for(int i=0;i<current.size();i++){\n                prev[current[i]-'a']--;\n            }\n        n -= current.size();\n        int rjct=helper(arr,prev, i + 1, n);\n        return max(acc,rjct);\n        }\n    }\n    \n    int maxLength(vector<string>& arr) {\n        vector<int> current(26,0);\n        return helper(arr,current, 0, 0);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-length-of-a-concatenated-string-with-unique-characters","has_notes":false}