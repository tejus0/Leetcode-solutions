{"id":809532675,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1664252093,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/809532675/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"7.9 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *list) {\n         ListNode *slow_p = list, *fast_p = list;\n\n\t// Iterate and find if loop exists or not\n\twhile (slow_p && fast_p && fast_p->next) {\n\t\tslow_p = slow_p->next;\n\t\tfast_p = fast_p->next->next;\n\n\t\t/* If slow_p and fast_p meet at some point then there\n\t\tis a loop */\n\t\tif (slow_p == fast_p) {\n\t\t\t//removeLoop(slow_p, list);\n\n\t\t\t/* Return 1 to indicate that loop is found */\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/* Return 0 to indicate that there is no loop*/\n\treturn 0;\n    }\n};","compare_result":"1111111111111111111111","title_slug":"linked-list-cycle","has_notes":false}