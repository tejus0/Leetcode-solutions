{"id":855013753,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1670245154,"status":10,"status_display":"Accepted","runtime":"227 ms","url":"/submissions/detail/855013753/","is_pending":"Not Pending","title":"Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts","memory":"32.1 MB","code":"\n\nclass Solution {\npublic:\n    int maxArea(int h, int w, vector<int>& horizontalCuts, vector<int>& verticalCuts) {\n        \n        horizontalCuts.push_back(0);\n        horizontalCuts.push_back(h);\n        \n        verticalCuts.push_back(0);\n        verticalCuts.push_back(w);\n        \n        sort(horizontalCuts.begin(),horizontalCuts.end());\n        sort(verticalCuts.begin(),verticalCuts.end());\n        \n        long long int l = 0, b = 0;\n        \n        for(int i=1; i<horizontalCuts.size(); i++){\n            if (b < horizontalCuts[i] - horizontalCuts[i-1]){\n                b = horizontalCuts[i] - horizontalCuts[i-1];\n            }\n        }\n        for (int i=1; i<verticalCuts.size(); i++){\n            if(l < verticalCuts[i] - verticalCuts[i-1]){\n                l = verticalCuts[i] - verticalCuts[i-1];\n            }\n        }\n        return (l*b)%1000000007;\n        \n    }\n};\n\n","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts","has_notes":false}