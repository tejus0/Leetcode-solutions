{"id":862796863,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1671557308,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/862796863/","is_pending":"Not Pending","title":"Combination Sum II","memory":"10.6 MB","code":"class Solution {\npublic:\n    void helper(int index, int target, vector<int>&candidates, vector<vector<int>>&ans, vector<int>&ds){\n        //base case\n        //when the combination ds is carrying is a valid one add it into th ans\n        if(target == 0){\n            ans.push_back(ds);\n            return;\n        }\n        for(int i = index; i< candidates.size(); i++){\n            if(candidates[i] > target) break; // no point of it to add it to the ans if the  candidate at ith element exceeds the target no picking up hence break \n            if(i  > index && candidates[i] == candidates[i-1])\n                continue;\n                //to avoid picking up the same elements and thus avoiding duplicates (no picking of element)\n            ds.push_back(candidates[i]);\n            helper(i+1, target- candidates[i], candidates, ans, ds); //call for next  index element\n            ds.pop_back();\n        }\n        \n    }\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n        sort(candidates.begin(), candidates.end());//sort the given candidates vector \n        vector<vector<int>>ans;\n        vector<int>ds;\n        helper(0, target, candidates, ans, ds);\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false}