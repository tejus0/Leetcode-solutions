{"id":873113743,"lang":"cpp","lang_name":"C++","time":"2 weeks, 4 days","timestamp":1673074828,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/873113743/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"N/A","code":"class Solution {\npublic:\n    bool canPartitionKSubsets(vector<int>& nums, int k) {\n        int sum = 0;\n        sum = accumulate(nums.begin(), nums.end(), sum);\n        if (nums.size() < k || sum % k) return false;\n        int reqSum= sum/k; \n        vector<int>visited(nums.size(), false);\n        return backtrack(nums, visited, reqSum, 0, 0, k);\n    }\n    \n    bool backtrack(vector<int>& nums,vector<int>visited, int target, int curr_sum, int i, int k) {\n        if (k == 1) \n            return true;\n        \n        if (curr_sum == target) \n            return backtrack(nums, visited, target, 0, 0, k-1);\n        \n        for (int j = i; j < nums.size(); j++) {\n            if (visited[j] || curr_sum + nums[j] > target) continue;\n            \n            visited[j] = true;\n            if (backtrack(nums, visited, target, curr_sum + nums[j], j+1, k)) return true;\n            visited[j] = false;\n        }\n        \n        return false;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000","title_slug":"partition-to-k-equal-sum-subsets","has_notes":false}