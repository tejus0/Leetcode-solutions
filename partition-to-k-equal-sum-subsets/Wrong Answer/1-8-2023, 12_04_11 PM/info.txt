{"id":873876942,"lang":"cpp","lang_name":"C++","time":"2 weeks, 3 days","timestamp":1673159651,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/873876942/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"N/A","code":"class Solution {\npublic:\n    int vis[17];\n    int n;\n    \n    bool solve(vector<int>& nums, int ind, int cs, int target, int k){\n        if(k==1){\n            return true;\n        }\n        if(ind==n){\n            return false;\n        }\n        if(cs==target)\n            return solve(nums, 0, 0, target, k-1);\n        for(int i=ind;i<n;i++){\n            if (i-1>=0 && nums[i]==nums[i-1] ) //handle TLE for consecutive same elements\n                continue;\n            if(!vis[i] && cs+nums[i]<=target){\n                vis[i]=1;\n                if(solve(nums,i+1,cs+nums[i],target,k))\n                    return true;\n                vis[i]=0;\n            }\n        }\n        return false;\n    }\n    \n    bool canPartitionKSubsets(vector<int>& nums, int k) {\n        n=nums.size();\n        memset(vis,0,sizeof(vis));\n        int sum=0;\n        for(auto x: nums)\n            sum+=x;\n        if(k==0 || sum%k!=0)\n            return false;\n        int target=sum/k;\n        int cs=0;\n        int ind=0;\n        return solve(nums, ind, cs, target, k);\n    }\n};","compare_result":"110001101111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111110111111111011","title_slug":"partition-to-k-equal-sum-subsets","has_notes":false}