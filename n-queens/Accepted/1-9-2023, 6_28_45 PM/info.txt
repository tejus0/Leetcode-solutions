{"id":874728123,"lang":"cpp","lang_name":"C++","time":"2 weeks, 1 day","timestamp":1673269125,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/874728123/","is_pending":"Not Pending","title":"N-Queens","memory":"7.2 MB","code":"class Solution {\n    //since we are traversing cols from left side 1 no need to check all directions for attack only from left\n    bool notAttacking(int row, int col, vector<string> &board, int n) {\n        int tmpRow = row;\n        int tmpCol = col;\n        \n        //checking left upper diagonal for attack for any queen\n        while(row >= 0 && col >= 0) {\n            if(board[row][col] == 'Q')  return false;\n            row--;\n            col--;\n        }\n        \n        //checking left side of cols for attack from any queen\n        row = tmpRow;\n        col = tmpCol;\n        while(col>=0) {\n            if(board[row][col] == 'Q')  return false;\n            col--;\n        }\n        \n        //checking left downward diagonal for any attack\n        row = tmpRow;\n        col = tmpCol;\n        while(row < n && col >= 0) {\n            if(board[row][col] == 'Q') return false;\n            row++;\n            col--;\n        }\n        //if not under attack\n        return true;\n    }\n    \n    void solve(int col, vector<string> &board, vector<vector<string>> &res, int n) {\n        //Base Case - if col reaches the end\n        if(col == n) {\n            res.push_back(board);\n            return ;\n        }\n        \n        for(int row=0;row<n;row++) {\n            if(notAttacking(row,col,board,n)) { //row is fixed and traversed in column\n                board[row][col] = 'Q';\n                solve(col+1 , board, res, n);\n                board[row][col] = '.';\n            }\n        }\n    }\n    \n    public:\n    vector<vector<string>> solveNQueens(int n) {\n        vector<vector<string>> res;\n        vector<string> board(n);\n        string s(n,'.');\n        \n        for(int i=0;i<n;i++) {\n            board[i] = s;\n        }\n        solve(0,board,res,n);\n        return res;\n    }\n};","compare_result":"111111111","title_slug":"n-queens","has_notes":false}