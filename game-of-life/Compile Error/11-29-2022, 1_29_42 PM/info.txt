{"id":851632233,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1669708782,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/851632233/","is_pending":"Not Pending","title":"Game of Life","memory":"N/A","code":"int getLiveNeighbours(vector<vector<int>>& curr, int i, int j, int m, int n) {\n\tint liveNeighbours = 0;\n    \n\tif(i>0) {\n\t\t//check the upper neighbour\n\t\tif(curr[i-1][j] == 1) ;\n\t}\n\tif(i<m-1) {\n\t\t//check the lower neighbour\n\t\tif(curr[i+1][j] == 1) liveNeighbours++;\n\t}\n\tif(j>0) {\n\t\t//check the left neighbour\n\t\tif(curr[i][j-1] == 1) liveNeighbours++;\n\t}\n\tif(j<n-1) {\n\t\t//check the right neighbour\n\t\tif(curr[i][j+1] == 1) liveNeighbours++;\n\t}\n\n\tif(i>0 && j>0) {\n\t\tif(curr[i-1][j-1] == 1) liveNeighbours++;\n\t}\n\tif(i>0 && j<n-1) {\n\t\tif(curr[i-1][j+1] == 1) liveNeighbours++;\n\t}\n\tif(i<m-1 && j>0) {\n\t\tif(curr[i+1][j-1] == 1) liveNeighbours++;\n\t}\n\tif(i<m-1 && j<n-1) {\n\t\tif(curr[i+1][j+1] == 1) liveNeighbours++;\n\t}\n\treturn liveNeighbours;\n}\nvoid gameOfLife(vector<vector<int>>& board) {\n\tvector<vector<int>> curr = board;\n\tint m = board.size();\n\tint n = board[0].size();\n\tfor(int i = 0; i<m; i++) {\n\t\tfor(int j = 0; j<n; j++) {\n\t\t\tint ln = getLiveNeighbours(curr, i, j, m, n);\n\t\t\tif(board[i][j] == 0) {\n\t\t\t\t//currently dead\n\t\t\t\t//can become alive if has exactly three live neighbours\n\t\t\t\tif(ln == 3) {\n\t\t\t\t\tboard[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(board[i][j] == 1) {\n\t\t\t\t//<2 -> die\n\t\t\t\t//==2 || ==3 live\n\t\t\t\t//>3 ->die\n\t\t\t\tif(ln < 2 || ln > 3) {\n\t\t\t\t\tboard[i][j] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","compare_result":null,"title_slug":"game-of-life","has_notes":false}